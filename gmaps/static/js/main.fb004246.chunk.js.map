{"version":3,"sources":["components/style.module.scss","components/GoogleMap.js","components/Steps.js","functions/calculations.js","functions/TSPalgorithms.js","components/App.js","index.js"],"names":["module","exports","GoogleMap","markerId","onMarkerClick","props","clickedMarker","markers","updateMarkers","filter","marker","id","map","onMapClicked","mapProps","clickEvent","push","lat","latLng","lng","name","google","this","loaded","className","style","onClick","height","position","width","zoom","key","Component","GoogleApiWrapper","apiKey","Steps","state","algorithm","handleChange","e","setState","target","value","step","runIteration","steps","disabled","button","increaseStep","onChange","stopIteration","startIteration","calculateDistance","lat1","lon1","lat2","lon2","deg2rad","deg","Math","PI","dLat","dLon","a","sin","cos","atan2","sqrt","calculateDistances","forEach","index","distances","markerTwo","distance","latLngArrayMap","array","calcPathDistance","reduce","b","find","shortestPath","polylineSearch","i","shortestDistance","shortestId","shortestPathCoordinates","length","path","console","log","bruteForce","permutations","Arr","A","slice","swap","tmp","generate","n","generatePermutations","bestDistance","perm","unshift","App","polylines","timeouts","calculatePath","drawPolyline","clearPolylines","timeoutMultiplier","paths","setTimeout","maps","Polyline","geodesic","strokeColor","strokeOpacity","strokeWeight","setMap","clearTimeout","pop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb004246.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"steps\":\"style_steps__aHb4N\",\"button\":\"style_button__1Gbl2\",\"map\":\"style_map__2mGSF\"};","import React, { Component } from 'react';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport style from './style.module.scss'\n\nexport class GoogleMap extends Component {\n  markerId = 1;\n\n  onMarkerClick = (props, clickedMarker) => {\n    const { markers, updateMarkers } = this.props;\n    updateMarkers(markers.filter(marker => marker.id !== clickedMarker.id), props.map);\n  }\n\n\n  onMapClicked = (mapProps, map, clickEvent) => {\n    const { markers, updateMarkers } = this.props;\n\n    markers.push({ lat: clickEvent.latLng.lat(), lng: clickEvent.latLng.lng(), name: `Marker ${this.markerId}`, id: this.markerId });\n    this.markerId++;\n    updateMarkers(markers, map, mapProps.google);\n  };\n\n  render() {\n    const { loaded, google, markers } = this.props;\n    if (!loaded) return <div>Loading...</div>;\n\n    return (\n      <Map\n        className={style.map}\n        google={google}\n        onClick={this.onMapClicked}\n        style={{ height: '100%', position: 'relative', width: '100%' }}\n        zoom={14}\n      >\n        {markers.map(marker => {\n          return <Marker\n            key={marker.name}\n            name={marker.name}\n            id={marker.id}\n            onClick={this.onMarkerClick}\n            position={{ lat: marker.lat, lng: marker.lng }}\n          />\n        })}\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('GOOGLE_API_KEY')\n})(GoogleMap)","import React, { Component, Fragment } from 'react';\nimport style from './style.module.scss'\n\nexport default class Steps extends Component {\n  state = {\n    algorithm: 'shortest',\n  }\n\n  handleChange = e => this.setState({ algorithm: e.target.value });\n\n  render() {\n    const { step, markers, runIteration } = this.props;\n    const { algorithm } = this.state;\n\n    return (\n      <div className={style.steps}>\n        <h2>Shortest distance calculator</h2>\n        {step === 1 &&\n          <p>\n            Click on map to drop markers in various spots on the map<br />\n            <u>You have to select minimum 3 markers in order for algorithms to work.</u><br />\n            <p>If you click on selected marker then it will be removed.</p>\n            <p>List of all your markers:</p>\n            {markers && markers.map(marker =>\n              <Fragment key={marker.id}>\n                <u>Lat: {marker.lat}, Lng: {marker.lng}</u><br />\n              </Fragment>)}\n            {markers && <button disabled={markers < 3} className={style.button} onClick={this.props.increaseStep}>Continue</button>}\n          </p>}\n        {step === 2 &&\n          <p>\n            Now that you have selected all the markers, please choose wanted algorithm:<br />\n            <select\n              value={algorithm}\n              onChange={this.handleChange}\n            >\n              <option value=\"shortest\">Shortest Path (always select shortest distance between markers)</option>\n              <option value=\"bruteforce\">Brute Force (check all possible paths)</option>\n            </select><br />\n            {runIteration && <button className={style.button} onClick={this.props.stopIteration}>STOP</button>}\n            {!runIteration && <button className={style.button} onClick={() => this.props.startIteration(algorithm)}>Run</button>}\n          </p>\n        }\n      </div>\n    );\n  }\n}\n","\n\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radius of the earth in km\n  const deg2rad = (deg) => deg * (Math.PI/180)\n  const dLat = deg2rad(lat2-lat1);\n  const dLon = deg2rad(lon2-lon1);\n  const a =\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n    Math.sin(dLon/2) * Math.sin(dLon/2)\n    ;\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  const d = R * c; // Distance in km\n  return d;\n}\n\nconst calculateDistances = (markers) => {\n  markers.forEach((marker, index) => {\n    const distances = [];\n    markers.forEach((markerTwo)=>{\n      if(markerTwo.id !== marker.id){\n        distances.push({\n          id: markerTwo.id,\n          distance: calculateDistance(marker.lat, marker.lng, markerTwo.lat, markerTwo.lng)\n        });\n      }\n    });\n    markers[index] = {...marker, distances};\n  });\n  return markers;\n}\n\nexport { calculateDistances };","\nconst latLngArrayMap = array => array.map(marker => { return {lat: marker.lat, lng: marker.lng} })\nconst calcPathDistance = array => array.reduce((a, b, index) =>\n  index\n  ? { id: b.id, distance: a.distance + b.distances.find(distance => distance.id === a.id).distance }\n  : { id: b.id, distance: 0 }\n, 0)\n\nconst shortestPath = (markers) => {\n  const shortestPath = [];\n  const polylineSearch = [];\n  shortestPath.push(markers[0]);\n  const lastID = () => shortestPath[shortestPath.length - 1]['id'];\n\n  for(let i = 1; i < markers.length; i++){\n    let shortestDistance = 99999;\n    let shortestId = -1;\n\n    const shortestPathCoordinates = () => latLngArrayMap(shortestPath);\n    if(shortestPath.length > 1) polylineSearch.push([ shortestPathCoordinates() ]);\n\n    markers.find(marker => marker.id === lastID()).distances\n    .forEach(distance => {\n      if(!shortestPath.find(path => distance.id === path.id)){\n        const marker = markers.find(marker => marker.id === distance.id);\n        polylineSearch.push([\n          shortestPathCoordinates(),\n          [ ...shortestPathCoordinates(), { lat: marker.lat, lng: marker.lng } ],\n        ]);\n\n        if(shortestDistance > distance.distance){\n          shortestDistance = distance.distance;\n          shortestId = distance.id\n        }\n      }\n    });\n    shortestPath.push(markers.find(marker => marker.id === shortestId));\n  }\n  console.log(calcPathDistance(shortestPath).distance);\n  return { shortestPath, polylineSearch };\n}\n\n// Give all possible variations from array, code example from:\n// https://www.reddit.com/r/javascript/comments/5k270h/all_possible_routes_traveling_salesman_problem_in/\nconst generatePermutations = (Arr) => {\n  const permutations = [];\n  const A = Arr.slice();\n\n  const swap = (a,b) => {\n    const tmp = A[a];\n    A[a] = A[b];\n    A[b] = tmp;\n  }\n\n  const generate = (n, A) => {\n    if (n == 1){\n      permutations.push(A.slice());\n    } else {\n      for(let i = 0; i <= n-1; i++) {\n        generate(n-1, A);\n        swap(n % 2 == 0 ? i : 0 ,n-1);\n      }\n    }\n  }\n\n  generate(A.length, A);\n\n  return permutations;\n}\n\nconst bruteForce = (markers) => {\n  const permutations = generatePermutations( markers.slice(1) );\n  let bestDistance = 99999;\n  let shortestPath = [];\n  const polylineSearch = []\n\n  permutations.forEach( perm => {\n    perm.unshift(markers[0]);\n    polylineSearch.push([\n      latLngArrayMap(perm)\n    ]);\n\n    const distance = calcPathDistance(perm).distance;\n    if(bestDistance > distance){\n      bestDistance = distance;\n      shortestPath = perm;\n    }\n  });\n  polylineSearch.push([latLngArrayMap(shortestPath)]);\n\n  return { bestDistance, shortestPath, polylineSearch }\n}\n\nexport { shortestPath, bruteForce }","import React, { Component, Fragment } from 'react';\nimport GoogleMap from './GoogleMap'\nimport Steps from './Steps'\nimport { calculateDistances } from '../functions/calculations'\nimport { shortestPath, bruteForce } from '../functions/TSPalgorithms'\n\nexport default class App extends Component {\n  state = {\n    markers: [],\n    step: 1,\n    runIteration: false,\n  };\n\n  map = null;\n  google = null;\n  polylines = null;\n  timeouts = [];\n\n  calculatePath = algorithm => {\n    const { markers } = this.state;\n    if (algorithm === 'shortest') {\n      const { polylineSearch } = shortestPath( markers );\n      this.drawPolyline( polylineSearch );\n    } else if (algorithm === 'bruteforce') {\n      const { polylineSearch } = bruteForce(markers);\n      this.drawPolyline( polylineSearch );\n    }\n  }\n\n  drawPolyline = polylines => {\n    this.clearPolylines();\n    let timeoutMultiplier = 0\n\n    polylines.forEach( paths => {\n      paths.forEach( path => {\n\n        this.timeouts.push(\n          setTimeout(()=> {\n            this.clearPolylines();\n            if(this.state.runIteration){\n\n              this.polylines = new this.google.maps.Polyline({\n                path,\n                geodesic: true,\n                strokeColor: '#FF0000',\n                strokeOpacity: 1.0,\n                strokeWeight: 2\n              });\n              this.polylines.setMap(this.map);\n\n            }\n          }, timeoutMultiplier*200)\n        );\n\n        timeoutMultiplier++;\n      });\n    });\n    this.timeouts.push( setTimeout(() => this.stopIteration(), timeoutMultiplier*200) );\n  }\n\n  clearPolylines = () => this.polylines ? this.polylines.setMap(null) : null;\n\n  updateMarkers = (markers, map, google) => {\n    this.map = map;\n    this.google = google;\n    this.setState({ markers });\n  }\n\n  increaseStep = () => this.setState({ step: ++this.state.step })\n\n  startIteration = algorithm => {\n    this.setState({ runIteration: true });\n    calculateDistances( this.state.markers );\n    this.calculatePath( algorithm );\n  }\n\n  stopIteration = () => {\n    for( let i = 0;  i < this.timeouts.length; i++){\n      clearTimeout( this.timeouts[i] )\n    }\n    while( this.timeouts.length ) this.timeouts.pop();\n    this.setState({ runIteration: false });\n  }\n\n  render() {\n    const { markers } = this.state;\n\n    return (\n      <Fragment>\n        <Steps increaseStep={this.increaseStep} startIteration={this.startIteration} stopIteration={this.stopIteration} {...this.state} />\n        <GoogleMap markers={markers} google={this.props.google} updateMarkers={this.updateMarkers} />\n      </Fragment>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}